/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "media/player/default/player.h"

extern "C" {
#include <libavcodec/avcodec.h>
#include <libavcodec/version.h>
#include <libavdevice/version.h>
#include <libavfilter/version.h>
#include <libavformat/version.h>
#include <libavutil/version.h>
#include <libswresample/version.h>
#include <libswscale/version.h>
}

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Class:     cn_richie_ffmpeg_FFmpegNative
 * Method:    getVersion
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_cn_richie_ffmpeg_FFmpegNative_getVersion
        (JNIEnv *env, jclass cls) {
    char strBuf[1024] = {0};
    strcat(strBuf, "libavdec: ");
    strcat(strBuf, AV_STRINGIFY(LIBAVCODEC_VERSION));
    strcat(strBuf, "\nlibavdevice: ");
    strcat(strBuf, AV_STRINGIFY(LIBAVDEVICE_VERSION));
    strcat(strBuf, "\nlibavfilter: ");
    strcat(strBuf, AV_STRINGIFY(LIBAVFILTER_VERSION));
    strcat(strBuf, "\nlibavformat: ");
    strcat(strBuf, AV_STRINGIFY(LIBAVFORMAT_VERSION));
    strcat(strBuf, "\nlibavutil: ");
    strcat(strBuf, AV_STRINGIFY(LIBAVUTIL_VERSION));
    strcat(strBuf, "\nlibswresample: ");
    strcat(strBuf, AV_STRINGIFY(LIBSWRESAMPLE_VERSION));
    strcat(strBuf, "\nlibswscale: ");
    strcat(strBuf, AV_STRINGIFY(LIBSWSCALE_VERSION));
    return env->NewStringUTF(strBuf);
}


static inline jfieldID getHandleField(JNIEnv *env, jobject obj) {
    jclass clz = env->GetObjectClass(obj);
    jfieldID fieldId = env->GetFieldID(clz, "mPlayerHandle", "J");
    return fieldId;
}

static inline jlong getHandle(JNIEnv *env, jobject obj) {
    jfieldID fieldId = getHandleField(env, obj);
    jlong handle = env->GetLongField(obj, fieldId);
    return handle;
}

static inline void setHandle(JNIEnv *env, jobject obj, jlong value) {
    jfieldID fieldId = getHandleField(env, obj);
    env->SetLongField(obj, fieldId, value);
}

/*
 * Class:     cn_richie_ffmpeg_FFmpegNative
 * Method:    createPlayer
 * Signature: (Ljava/lang/String;Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_cn_richie_ffmpeg_FFmpegNative_createPlayer
        (JNIEnv *env, jobject obj, jstring path, jobject surface) {
    auto *player = new Player(env, path, surface);
    setHandle(env, obj, (jlong) player);
}

/*
 * Class:     cn_richie_ffmpeg_FFmpegNative
 * Method:    play
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cn_richie_ffmpeg_FFmpegNative_play
        (JNIEnv *env, jobject obj) {
    jlong ptr = getHandle(env, obj);
    if (ptr > 0) {
        ((Player *) ptr)->play();
    }
}

/*
 * Class:     cn_richie_ffmpeg_FFmpegNative
 * Method:    pause
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cn_richie_ffmpeg_FFmpegNative_pause
        (JNIEnv *env, jobject obj) {
    jlong ptr = getHandle(env, obj);
    if (ptr > 0) {
        ((Player *) ptr)->pause();
    }
}

/*
 * Class:     cn_richie_ffmpeg_FFmpegNative
 * Method:    releasePlayer
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_cn_richie_ffmpeg_FFmpegNative_releasePlayer
        (JNIEnv *env, jobject obj) {
    jlong ptr = getHandle(env, obj);
    if (ptr > 0) {
        ((Player *) ptr)->release();
    }
}


#ifdef __cplusplus
}
#endif
